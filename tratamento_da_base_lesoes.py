# -*- coding: utf-8 -*-
"""TRATAMENTO DA BASE LESOES

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yOW4pxfd_q63voZgUZ7q91HFCQlo5BsI
"""

import pandas as pd

data = pd.read_excel("/content/Incidencia_de_Lesoes_em_Atletas_de_Basquete_de_Alagoas_respostas.xlsx")

##Mudando o nome das colunas (para ficar mais fácil o acesso)
data.columns = ['Carimbo de data/hora', 'Endereço de e-mail',
       'Você concorda em participar do nosso estudo e responder a esse questionário?',
       'Nome completo: ', 'Idade', 'Cidade_estado', 'Genero',
       'peso_kg', 'altura_cm', 'membro_dominante',
       'mao_arremesso',
       'perna_apoio',
       'posicao',
       'tempo_pratica',
       'num_compet_12meses',
       'num_treino_semana',
       'lesao_musculoesqueletica_12meses',
       'lesao_musculoesqueletica_carreira',
       'lesao_treino_ou_compet',
       'num_lesoes_em_compet',
       'num_lesoes_em_treino',
       'locais_lesao',
       'tecido_lesionado',
       'lesao_apos_aumento_intensidade_treino',
       'lesao_apos_aumento_jogos',
       'deixar_partida_lesao_cronica',
       'momento_lesao',
       'sente_dor_onde',
       'modifica_jogo_para_evitar_lesao',
       'ranger_ou_estalar_em',
       'dificuldade_agachar',
       'dificuldade_saltar',
       'dificulade_mudar_direcao',
       'dificuldade_arremessar',
       'atendimento_ou_orientação_fisio',
       'tratamento_fisio_lesao',
       'orientacao_prevencao_lesoes',
       'estrategias_nutricionais_perfomance',
       'alimentacao_orientacao',
       'suplemento_pretreino',
       'suplemento_compet']
#data.columns
#data.to_excel("data.xlsx")
#data.info()

data.shape

#PADRONIZAÇÃO DA COLUNA Idade
data.Idade.unique()

data.Idade = data.Idade.replace('29 anos ',29)
data.Idade = data.Idade.replace('39 anos ',39)
data.Idade = data.Idade.replace('19 anos',19)
data.Idade = data.Idade.replace('20 anos',20)
data.Idade = data.Idade.replace(',48 anos',48)
data.Idade = data.Idade.replace('47 anos',47)
data.Idade = data.Idade.replace('38 anos',38)
data.Idade = data.Idade.replace('24 anos ',24)
data.Idade = data.Idade.replace('29 anos',29)

#PADRONIZAÇÃO DA COLUNA Cidade_estado

#Padronizando os valores de quem mora em Maceió
mcz = ['Maceió Alagoas ', 'Maceió/al', 'Maceio/AL', 'Maceió/Alagoas',
       'MACEIO', 'Maceió- Al', 'Maceio/Alagoas', 'MACEIO/AL',
       'Maceió Alagoas', 'Maceió/AL', 'Maceió Al','Maceió', 'Maceió AL ','Maceió ',
       'Maceio/ alagoas', 'Maceio al.', 'MACEIÓ / ALAGOAS', 'Maceió-AL',
       'Maceió- AL', 'Maceio/Alagoas ', 'Maceió-al','Maceió - AL', 'Maceió al','Maceio - AL', 'Maceió-Al', 'Maceio', 'Maceio-AL',
       'Maceió /Alagoas','Maceió/ Alagoas',
       'Maceió / Alagoas', 'Maceió/Al', 'Maceió/ Alagoas ', 'Maceio Al',
       'Mário/AL','Maceió / Alagoas ',
       'Maceio / Alagoas','Maceió-Al ','Maceió-Alagoas', 'Maceió - al', 'Maceió / AL', 'Maceió, Alagoas.','Alagoas/ Maceió ',
       'Maceio/alagoas', 'Maceió/ AL', 'Maceio/al', 'Maceió/Alagoas ',
       'Maceio AL', 'Maceió - Alagoas ', 'Maceio alagoagoa']
data.Cidade_estado = data.Cidade_estado.replace(to_replace= mcz, value = "Maceió-AL")

#Padronizando os valores de quem mora em Rio largo
riolargo = ['Rio Largo/AL','Rio Largo /Alagoas','RIO LARGO ','Rio Largo']
data.Cidade_estado = data.Cidade_estado.replace(to_replace = riolargo, value = "Rio Largo-AL")
#padronizando os valores de quem mora em Recife
recife =['Recife/PE','Recife ','Recife/Pernambuco ']
data.Cidade_estado = data.Cidade_estado.replace(to_replace = recife, value = "Recife-PE")
#padronizando os valores unicos restantes
data.Cidade_estado = data.Cidade_estado.replace(to_replace = "Delmiro Gouveia AL", value = "Delmiro Gouveia-AL")
data.Cidade_estado = data.Cidade_estado.replace(to_replace = "Satuba", value = "Satuba-AL")
data.Cidade_estado = data.Cidade_estado.replace(to_replace = 'Teotônio Vilela Alagoas ', value = "Teotônio Vilela-AL")
data.Cidade_estado = data.Cidade_estado.replace(to_replace = 'SÃO PAULO/SP', value = "São Paulo-SP")
data.Cidade_estado = data.Cidade_estado.replace(to_replace = 'Brasília - DF', value = "Brasília-DF")
data.Cidade_estado = data.Cidade_estado.replace(to_replace = 'Salvador/BA', value = "Salvador-BA")

data.Cidade_estado.unique()
#Tem alguns dados errados nessa coluna pensei em anular e excluir as linhas 
#mas não sei se cidade_estado é fundamental para o modelo então deixarei assim

#PADRONIZAÇÃO DA COLUNA peso_kg

data.peso_kg = data.peso_kg.replace('78kg',78)
data.peso_kg = data.peso_kg.replace('75kl',75)
data.peso_kg = data.peso_kg.replace('65kg',65)
data.peso_kg = data.peso_kg.replace('76kg',76)
data.peso_kg = data.peso_kg.replace('120.00',120)
data.peso_kg = data.peso_kg.replace('75,300 kg',75.3)
data.peso_kg = data.peso_kg.replace('57kgs',57)
data.peso_kg = data.peso_kg.replace('105 Kg ',105)
data.peso_kg = data.peso_kg.replace('97kg',97)
data.peso_kg = data.peso_kg.replace('61kg',61)
data.peso_kg = data.peso_kg.replace('70kg',70)
data.peso_kg = data.peso_kg.replace('99 kg',99)
data.peso_kg = data.peso_kg.replace('91 kg',91)
data.peso_kg = data.peso_kg.replace('58kg',58)
data.peso_kg = data.peso_kg.replace('72 kg',72)
data.peso_kg = data.peso_kg.replace('88KG',88)
data.peso_kg = data.peso_kg.replace('90 kg',90)
data.peso_kg = data.peso_kg.replace('88kg',88)
data.peso_kg = data.peso_kg.replace('108kg',108)
data.peso_kg = data.peso_kg.replace('95kg',95)

data.peso_kg.unique()

data.altura_cm.unique()

#PADRONIZAÇÃO COLUNA altura_cm

data.altura_cm = data.altura_cm.replace(1.58,158)
data.altura_cm = data.altura_cm.replace(1.68,168)
data.altura_cm = data.altura_cm.replace('1.64',164)
data.altura_cm = data.altura_cm.replace('1.89',189)
data.altura_cm = data.altura_cm.replace(1.56,156)
data.altura_cm = data.altura_cm.replace(1.64,164)
data.altura_cm = data.altura_cm.replace(1.73,173)
data.altura_cm = data.altura_cm.replace('1.73',173)
data.altura_cm = data.altura_cm.replace(1.77,177)
data.altura_cm = data.altura_cm.replace(1.62,162)
data.altura_cm = data.altura_cm.replace(1.75,175)
data.altura_cm = data.altura_cm.replace(1.7,170)
data.altura_cm = data.altura_cm.replace(1.82,182)
data.altura_cm = data.altura_cm.replace('1,75 cm',175)
data.altura_cm = data.altura_cm.replace(1.88,188)
data.altura_cm = data.altura_cm.replace(1.78,178)
data.altura_cm = data.altura_cm.replace(1.71,171)
data.altura_cm = data.altura_cm.replace(1.81,181)
data.altura_cm = data.altura_cm.replace('1.92',192)
data.altura_cm = data.altura_cm.replace(1.74,174)
data.altura_cm = data.altura_cm.replace(1.98,198)
data.altura_cm = data.altura_cm.replace('1.83',183)
data.altura_cm = data.altura_cm.replace(1.8,180)
data.altura_cm = data.altura_cm.replace(2.1,210)
data.altura_cm = data.altura_cm.replace(1.83,183)
data.altura_cm = data.altura_cm.replace(1.87,187)
data.altura_cm = data.altura_cm.replace('1.82',182)
data.altura_cm = data.altura_cm.replace(2,200)
data.altura_cm = data.altura_cm.replace(1.59,159)
data.altura_cm = data.altura_cm.replace(1.85,185)
data.altura_cm = data.altura_cm.replace('1.93',193)
data.altura_cm = data.altura_cm.replace('1, 78',178)
data.altura_cm = data.altura_cm.replace('1.81',181)
data.altura_cm = data.altura_cm.replace('1.62',162)
data.altura_cm = data.altura_cm.replace(1.69,169)
data.altura_cm = data.altura_cm.replace(1.63,163)
data.altura_cm = data.altura_cm.replace(1.6,160)
data.altura_cm = data.altura_cm.replace('1 63',163)
data.altura_cm = data.altura_cm.replace('1.67',167)
data.altura_cm = data.altura_cm.replace(1.76,176)
data.altura_cm = data.altura_cm.replace('181cm',181)
data.altura_cm = data.altura_cm.replace(1.65,165)
data.altura_cm = data.altura_cm.replace(1.84,184)
data.altura_cm = data.altura_cm.replace('1.88',188)
data.altura_cm = data.altura_cm.replace(1.89,189)
data.altura_cm = data.altura_cm.replace('166cm',166)
data.altura_cm = data.altura_cm.replace('1.82 cm',182)
data.altura_cm = data.altura_cm.replace('2.01',201)
data.altura_cm = data.altura_cm.replace('1.80',180)
data.altura_cm = data.altura_cm.replace('1,80 cm',180)
data.altura_cm = data.altura_cm.replace('1.90',190)
data.altura_cm = data.altura_cm.replace(2.02,202)
data.altura_cm = data.altura_cm.replace(1.91,191)
data.altura_cm = data.altura_cm.replace( 1.79,179)
data.altura_cm = data.altura_cm.replace(1.86,186)
data.altura_cm = data.altura_cm.replace('1.78',178)
data.altura_cm = data.altura_cm.replace('1,77m',177)
data.altura_cm = data.altura_cm.replace('1.87',187)
data.altura_cm = data.altura_cm.replace('187cm',187)
data.altura_cm = data.altura_cm.replace(1.94,194)





data.altura_cm.unique()

data.alimentacao_orientacao = data.alimentacao_orientacao.replace('Youtube ', "YouTube") 
data.alimentacao_orientacao.unique()

#PADRONIZAÇÃO num_compet_12meses
data.num_compet_12meses.unique()

data.num_compet_12meses = data.num_compet_12meses.replace('10 ou mais', 10)

data.to_excel("data_padronizada.xlsx")

#data.isnull().sum()
data = data.dropna()

data.shape

data.to_excel("data_sem_nulo.xlsx")

import pandas as pd
dados = pd.read_excel("data_sem_nulo.xlsx")

dados.locais_lesao.unique()

#LOCAIS DE MAIOR INCIDENCIA DE LESOES NO BASQUETE : TORNOZELO, JOELHO E DEDOS.
dados.locais_lesao.unique()

#criando coluna com todos que tiveram lesões no joelho

dados["lesao_joelho"] = dados.locais_lesao.str.contains("Joelho|JOELHO|joelho|joelhos|Joelhos")
#dados.head(10)

#criando coluna com todos que tiveram lesões no tornozelo

dados["lesao_tornozelo"] = dados.locais_lesao.str.contains("tornozelo|Tornozelo|TORNOZELO|Tornozelos")

#criando coluna com todos que tiveram lesões nos dedos

dados["lesao_dedos"] = dados.locais_lesao.str.contains("Dedo|dedo|Dedos|dedos|DEDOS")

dados = dados.drop(columns= ['Unnamed: 0', 'Carimbo de data/hora', 'Endereço de e-mail',
       'Você concorda em participar do nosso estudo e responder a esse questionário?',
       'Nome completo: ','Cidade_estado']) #colunas categoricas que nao entrarçao no treino dos modeos

dados = dados.drop(columns = ['locais_lesao']) #ja separamos os locais entao tira esa coluna
dados = dados.drop(columns = ['suplemento_pretreino', 'suplemento_compet',]) #essas colunas nao alteraram em nada os valores dos modelos

dados["tecido_lesionado_musculo"] = dados.tecido_lesionado.str.contains("Músculo")
dados["tecido_lesionado_tendao"] = dados.tecido_lesionado.str.contains("Tendão")
dados["tecido_lesionado_ligamento"] = dados.tecido_lesionado.str.contains("Ligamento")
dados["tecido_lesionado_articulacao"] = dados.tecido_lesionado.str.contains("Articulação")
dados["tecido_lesionado_osso"] = dados.tecido_lesionado.str.contains("Osso")
dados["tecido_lesionado_nervo"] = dados.tecido_lesionado.str.contains("Nervo")
dados = dados.drop(columns = ['tecido_lesionado'])
dados.columns

dados.momento_lesao.unique()

dados["momento_lesao_naosabe"] = dados.momento_lesao.str.contains("Não sei identificar")
dados["momento_lesao_queda"] = dados.momento_lesao.str.contains("Queda")
dados["momento_lesao_corrida"] = dados.momento_lesao.str.contains("Corrida de Velocidade")
dados["momento_lesao_aterrissagem"] = dados.momento_lesao.str.contains("Aterrissagem")
dados["momento_lesao_arranque"] = dados.momento_lesao.str.contains("Arranque")
dados["momento_lesao_salto"] = dados.momento_lesao.str.contains("Salto")
dados["momento_lesao_choque"]= dados.momento_lesao.str.contains('Choque')
dados["momento_lesao_passe"] = dados.momento_lesao.str.contains("Lançamento (passe)")
dados["momento_lesao_arremesso"] = dados.momento_lesao.str.contains("Arremesso")
dados["momento_lesao_passofalso"] =  dados.momento_lesao.str.contains("Passo em falso")
dados["momento_lesao_finta"] = dados.momento_lesao.str.contains("Fui fazer uma finta com o corpo em velocidade")
dados["momento_lesao_paradabrusca"] = dados.momento_lesao.str.contains("Parada brusca e cotovelo no rosto")
dados["momento_lesao_recepcao"] = dados.momento_lesao.str.contains("Recepção de passe")

dados = dados.drop(columns = ["momento_lesao"])
dados.head(1)

dados.sente_dor_onde.unique()

dados["sente_dor_pe"] = dados.sente_dor_onde.str.contains("Pé")
dados["sente_dor_tornozelo"] = dados.sente_dor_onde.str.contains("tornozelo|Tornozelo|tornozelos")
dados["sente_dor_lombar"] = dados.sente_dor_onde.str.contains("lombar|Lombar")
dados["sente_dor_coluna"] = dados.sente_dor_onde.str.contains("Coluna|COLUNA|coluna")
dados["sente_dor_joelho"] = dados.sente_dor_onde.str.contains("JOELHO|Joelho|Joelhos|joelho|joelhos")
dados["sente_dor_ombro"] = dados.sente_dor_onde.str.contains("OMBRO|ombro|Ombro")
dados["sente_dor_nao"] = dados.sente_dor_onde.str.contains("Não")
dados["sente_dor_metacarpo"] = dados.sente_dor_onde.str.contains("Metacarpo")
dados["sente_dor_clavicula"] = dados.sente_dor_onde.str.contains("clavícula")
dados["sente_dor_coxa"] = dados.sente_dor_onde.str.contains("coxa")
dados["sente_dor_virilha"] =dados.sente_dor_onde.str.contains("virilha")
dados["sente_dor_calcanhar"] = dados.sente_dor_onde.str.contains("calcanhar")
dados["sente_dor_cervical"] = dados.sente_dor_onde.str.contains("cervical")
dados["sente_dor_tendaoaquiles"] = dados.sente_dor_onde.str.contains("tendões|Tendão")
dados["sente_dor_cotovelo"] = dados.sente_dor_onde.str.contains("cotovelo")
dados["sente_dor_polegares"] = dados.sente_dor_onde.str.contains("polegares")
dados["sente_dor_panturrilha"] = dados.sente_dor_onde.str.contains("panturrilha")
dados["sente_dor_pubis"] = dados.sente_dor_onde.str.contains("púbis")
dados["sente_dor_costas"] = dados.sente_dor_onde.str.contains("Costa|costas")

dados = dados.drop(columns = ["sente_dor_onde"])

dados.ranger_ou_estalar_em.unique()
#joelho
#Tornozelo / Pé
#cotovelo
#ombro
#Coluna
#Punho / mão
#Quadril

dados["ranger_ou_estalar_em_joelho"] = dados.ranger_ou_estalar_em.str.contains("joelho")
dados["ranger_ou_estalar_em_tornozelope"] = dados.ranger_ou_estalar_em.str.contains("Tornozelo / Pé")
dados["ranger_ou_estalar_em_cotovelo"] = dados.ranger_ou_estalar_em.str.contains("cotovelo")
dados["ranger_ou_estalar_em_ombro"] = dados.ranger_ou_estalar_em.str.contains("ombro")
dados["ranger_ou_estalar_em_Coluna"] = dados.ranger_ou_estalar_em.str.contains("Coluna")
dados["ranger_ou_estalar_em_punhomao"] = dados.ranger_ou_estalar_em.str.contains("Punho / mão")
dados["ranger_ou_estalar_em_quadril"] = dados.ranger_ou_estalar_em.str.contains("Quadril")

dados = dados.drop(columns= ["ranger_ou_estalar_em"])
dados.head(5)

dados.columns

dados.to_excel("dadosbonitinhos.xlsx")

#PLOTS
from matplotlib import pyplot as plt
 
lesao_joelho = dados[dados.lesao_joelho] #pegando apenas quem tem lesao no joelho ==TRUE
lesao_tornozelo = dados[dados.lesao_tornozelo]
lesao_dedos = dados[dados.lesao_dedos]
plt.figure(figsize=(10,5))
plt.bar("Joelho",lesao_joelho.shape[0])
plt.bar("Tornozelo", lesao_tornozelo.shape[0])
plt.bar("Dedos",lesao_dedos.shape[0])
plt.title("Locais das lesões")

dadosmasc = dados[dados.Genero == 'Masculino']
plt.figure(figsize=(10,5))
plt.bar("Homem", dadosmasc.shape[0])
dadosfem = dados[dados.Genero == 'Feminino']
plt.bar("Mulher", dadosfem.shape[0])
plt.title("Divisão de atletas por Gênero")

plt.figure(figsize=(10,5))
treino1 = dados[dados["num_treino_semana"] == 1]
plt.bar("1",treino1.shape[0])
treino2 = dados[dados["num_treino_semana"] == 2]
plt.bar("2", treino2.shape[0])
treino3 = dados[dados["num_treino_semana"] == 3]
plt.bar("3", treino3.shape[0])
treino4 = dados[dados["num_treino_semana"] == 4]
plt.bar("4",treino4.shape[0])
treino5 = dados[dados["num_treino_semana"] == 5]
plt.bar("5", treino5.shape[0])
treino7 = dados[dados["num_treino_semana"] == 7]
plt.bar("7", treino7.shape[0])
plt.title("Número de treinos semanais")

plt.figure(figsize=(10,5))
tratamento_sim = dados[dados.tratamento_fisio_lesao == 'Sim']
plt.bar("Sim", tratamento_sim.shape[0])
tratamento_nao = dados[dados.tratamento_fisio_lesao == 'Não']
plt.bar("Não", tratamento_nao.shape[0])
plt.title("Atletas que trataram lesões com Fisioterapia")

dados.modifica_jogo_para_evitar_lesao.unique()

modifica_umpouco = dados[dados.modifica_jogo_para_evitar_lesao == 'Um pouco']
modifica_totalmente = dados[dados.modifica_jogo_para_evitar_lesao == 'Toltamente']
modifica_nao = dados[dados.modifica_jogo_para_evitar_lesao == 'Não']
modifica_moderadamente = dados[dados.modifica_jogo_para_evitar_lesao == 'Modernamente']
modifica_muito = dados[dados.modifica_jogo_para_evitar_lesao == 'Muito']
plt.figure(figsize=(10,5))
plt.bar("Um pouco", modifica_umpouco.shape[0])
plt.bar("Moderadamente", modifica_moderadamente.shape[0])
plt.bar("Muito", modifica_muito.shape[0])
plt.bar("Totalmente", modifica_totalmente.shape[0])
plt.bar("Não modifica", modifica_nao.shape[0])
plt.title("Atletas que modificam seu jogo para evitar lesões ")

dados.lesao_apos_aumento_intensidade_treino.unique()

aumento_treino_sim = dados[dados.lesao_apos_aumento_intensidade_treino == 'Sim']
aumento_treino_nao = dados[dados.lesao_apos_aumento_intensidade_treino == 'Não']
plt.figure(figsize=(10,5))
plt.bar("Sim", aumento_treino_sim.shape[0])
plt.bar("Não", aumento_treino_nao.shape[0])
plt.title("Atletas que sofreram lesões após aumento da intensidade dos treinos")

dados.lesao_apos_aumento_jogos.unique()

lesao_aumento_jogos_sim = dados[dados.lesao_apos_aumento_jogos == 'Sim']
lesao_aumento_jogos_nao = dados[dados.lesao_apos_aumento_jogos == 'Não']
plt.figure(figsize=(10,5))
plt.bar("Sim", lesao_aumento_jogos_sim.shape[0])
plt.bar("Não", lesao_aumento_jogos_nao.shape[0])
plt.title("Atletas que sofreram lesoes após aumento da quantidade de jogos")

dados.lesao_treino_ou_compet.unique()


lesao_em_compet = dados[dados.lesao_treino_ou_compet == 'Competição']
lesao_em_treino = dados[dados.lesao_treino_ou_compet == 'Treinamento']
lesao_em_treino_e_compet = dados[dados.lesao_treino_ou_compet == 'Treinamento, Competição']

plt.figure(figsize=(10,5))
plt.bar("Competição", lesao_em_compet.shape[0])
plt.bar("Treinamento", lesao_em_treino.shape[0])
plt.bar("Nos dois", lesao_em_treino_e_compet.shape[0])
plt.title("Atletas que se lesionaram em treinamento ou competições")

momento_arranque = dados[dados.momento_lesao_arranque]
momento_arremesso = dados[dados.momento_lesao_arremesso]
momento_aterrissagem = dados[dados.momento_lesao_aterrissagem]
momento_choque = dados[dados.momento_lesao_choque]
momento_corrida = dados[dados.momento_lesao_corrida]
momento_salto = dados[dados.momento_lesao_salto]


plt.figure(figsize=(10,5))
plt.bar("Arranque",momento_arranque.shape[0])
plt.bar("Arremesso",momento_arremesso.shape[0])
plt.bar("Aterrissagem",momento_aterrissagem.shape[0])
plt.bar("Choque",momento_choque.shape[0])
plt.bar("Corrida",momento_corrida.shape[0])
plt.bar("Salto",momento_salto.shape[0])
plt.title("Momento das lesões")

sentedor_coluna = dados[dados.sente_dor_coluna]
sentedor_costas = dados[dados.sente_dor_costas]
sentedor_coxa = dados[dados.sente_dor_coxa]
sentedor_joelho = dados[dados.sente_dor_joelho]
sentedor_lombar = dados[dados.sente_dor_lombar]
sentedor_ombro = dados[dados.sente_dor_ombro]
sentedor_tornozelo = dados[dados.sente_dor_tornozelo]


plt.figure(figsize=(10,5))
plt.bar("Coluna",sentedor_coluna.shape[0])
plt.bar("Costas",sentedor_costas.shape[0])
plt.bar("Coxa",sentedor_coxa.shape[0])
plt.bar("Joelho",sentedor_joelho.shape[0])
plt.bar("Lombar",sentedor_lombar.shape[0])
plt.bar("Ombro",sentedor_ombro.shape[0])
plt.bar("Tornozelo",sentedor_tornozelo.shape[0])
plt.title("Locais onde o atleta sente dor")

dados.columns

dados = dados.drop(columns =['alimentacao_orientacao','estrategias_nutricionais_perfomance','orientacao_prevencao_lesoes','atendimento_ou_orientação_fisio',
       'tratamento_fisio_lesao'] )

encoded_data = pd.get_dummies(dados)

encoded_data.head()

#so preciso das colunas ==true das lesoes entao dropo as colunas false

encoded_data.columns
#encoded_data = encoded_data.drop(columns =['locais_lesao','lesao_joelho_False','lesao_tornozelo_False', 'lesao_dedos_False'])

#transformando os 0 e 1 em strings (para classificar, as labels precisam ser dados nao continuos)

#encoded_data.lesao_joelho_True = encoded_data.lesao_joelho_True.replace(0, "NÃO")
#encoded_data.lesao_joelho_True = encoded_data.lesao_joelho_True.replace(1, "SIM")


encoded_data.to_excel("encoded_data.xlsx")


encoded_data.head(1)

